# -*- coding: utf-8 -*-
"""Cifar_Capsnet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_pOnas6Z3ZT3nGJ4P1EI3de92-_Qi8cm
"""

import keras.backend as K
import tensorflow as tf
from keras import initializers, layers

import numpy as np
import os
import pandas as pd
from keras.preprocessing.image import ImageDataGenerator
from keras import callbacks
from keras.utils.vis_utils import plot_model
import matplotlib.pyplot as plt

'''

def plot_model_history_loss(model_history):

    fig, axs = plt.subplots(1,3,figsize=(15,5))

    # summarize history for loss
    axs[0].plot(range(1,len(model_history.history['loss'])+1),model_history.history['loss'])
    axs[0].plot(range(1,len(model_history.history['val_loss'])+1),model_history.history['val_loss'])
    axs[0].set_title('Model Loss')
    axs[0].set_ylabel('Loss')
    axs[0].set_xlabel('Epoch')
    axs[0].set_xticks(np.arange(1,len(model_history.history['loss'])+1),len(model_history.history['loss'])/10)
    axs[0].legend(['train', 'val'], loc='best')

    # summarize history for loss
    axs[1].plot(range(1, len(model_history.history['out_recon_loss']) + 1), model_history.history['out_recon_loss'])
    axs[1].plot(range(1, len(model_history.history['val_out_recon_loss']) + 1), model_history.history['val_out_recon_loss'])
    axs[1].set_title('Reconstruction Loss')
    axs[1].set_ylabel('Loss')
    axs[1].set_xlabel('Epoch')
    axs[1].set_xticks(np.arange(1, len(model_history.history['out_recon_loss']) + 1), len(model_history.history['out_recon_loss']) / 10)
    axs[1].legend(['train', 'val'], loc='best')

 
    # summarize history for loss
    axs[2].plot(range(1, len(model_history.history['out_caps_loss']) + 1), model_history.history['out_caps_loss'])
    axs[2].plot(range(1, len(model_history.history['val_out_caps_loss']) + 1),model_history.history['val_out_caps_loss'])
    axs[2].set_title('Capsule Loss')
    axs[2].set_ylabel('Loss')
    axs[2].set_xlabel('Epoch')
    axs[2].set_xticks(np.arange(1, len(model_history.history['out_caps_loss']) + 1), len(model_history.history['out_caps_loss']) / 10)
    axs[2].legend(['train', 'val'], loc='best')


    
    # summarize history for accuracy
    
    axs[3].plot(range(1, len(model_history.history['out_caps_acc']) + 1), model_history.history['out_caps_acc'])
    axs[3].plot(range(1, len(model_history.history['val_out_caps_acc']) + 1),
                model_history.history['val_out_caps_acc'])
    axs[3].set_title('Capsule Loss')
    axs[3].set_ylabel('Loss')
    axs[3].set_xlabel('Epoch')
    axs[3].set_xticks(np.arange(1, len(model_history.history['out_caps_acc']) + 1),
                      len(model_history.history['out_caps_acc']) / 10)
    axs[3].legend(['train', 'val'], loc='best')
    plt.show()
   '''
def plot_model_history(model_history):
    fig, axs = plt.subplots(1, 2, figsize=(15, 5))

    # summarize history for loss
    axs[0].plot(range(1, len(model_history.history['loss']) + 1), model_history.history['loss'])
    axs[0].plot(range(1, len(model_history.history['val_loss']) + 1), model_history.history['val_loss'])
    axs[0].set_title('Model Loss')
    axs[0].set_ylabel('Loss')
    axs[0].set_xlabel('Epoch')
    axs[0].set_xticks(np.arange(1, len(model_history.history['loss']) + 1), len(model_history.history['loss']) / 10)
    axs[0].legend(['train', 'val'], loc='best')

    # summarize history for accuracy

    axs[1].plot(range(1, len(model_history.history['out_caps_acc']) + 1), model_history.history['out_caps_acc'])
    axs[1].plot(range(1, len(model_history.history['val_out_caps_acc']) + 1),
                model_history.history['val_out_caps_acc'])
    axs[1].set_title('Capsule Accuracy')
    axs[1].set_ylabel('Accuracy')
    axs[1].set_xlabel('Epoch')
    axs[1].set_xticks(np.arange(1, len(model_history.history['out_caps_acc']) + 1),
                      len(model_history.history['out_caps_acc']) / 10)
    axs[1].legend(['train', 'val'], loc='best')
    plt.show()


def plot_model_history_loss(model_history):
    fig, axs = plt.subplots(1, 2, figsize=(15, 5))
    # summarize history for loss
    axs[0].plot(range(1, len(model_history.history['out_recon_loss']) + 1), model_history.history['out_recon_loss'])
    axs[0].plot(range(1, len(model_history.history['val_out_recon_loss']) + 1),
               model_history.history['val_out_recon_loss'])
    axs[0].set_title('Reconstruction Loss')
    axs[0].set_ylabel('Loss')
    axs[0].set_xlabel('Epoch')
    axs[0].set_xticks(np.arange(1, len(model_history.history['out_recon_loss']) + 1),
                      len(model_history.history['out_recon_loss']) / 10)
    axs[0].legend(['train', 'val'], loc='best')

    # summarize history for loss
    axs[1].plot(range(1, len(model_history.history['out_caps_loss']) + 1), model_history.history['out_caps_loss'])
    axs[1].plot(range(1, len(model_history.history['val_out_caps_loss']) + 1),
                model_history.history['val_out_caps_loss'])
    axs[1].set_title('Capsule Loss')
    axs[1].set_ylabel('Loss')
    axs[1].set_xlabel('Epoch')
    axs[1].set_xticks(np.arange(1, len(model_history.history['out_caps_loss']) + 1),
                      len(model_history.history['out_caps_loss']) / 10)
    axs[1].legend(['train', 'val'], loc='best')
    plt.show()


class Length(layers.Layer):
    """
    Compute the length of vectors. This is used to compute a Tensor that has the same shape with y_true in margin_loss
    inputs: shape=[dim_1, ..., dim_{n-1}, dim_n]
    output: shape=[dim_1, ..., dim_{n-1}]
     Using this layer as model's output can directly predict labels by using `y_pred = np.argmax(model.predict(x), 1)`
    inputs: shape=[None, num_vectors, dim_vector]
    output: shape=[None, num_vectors]
    """

    def call(self, inputs, **kwargs):
        return K.sqrt(K.sum(K.square(inputs), -1))

    def compute_output_shape(self, input_shape):
        return input_shape[:-1]


class Mask(layers.Layer):
    """
    Mask a Tensor with shape=[None, d1, d2] by the max value in axis=1.
    Output shape: [None, d2]
    """

    def call(self, inputs, **kwargs):
        # use true label to select target capsule, shape=[batch_size, num_capsule]
        if type(inputs) is list:  # true label is provided with shape = [batch_size, n_classes], i.e. one-hot code.
            assert len(inputs) == 2
            inputs, mask = inputs
        else:  # if no true label, mask by the max length of vectors of capsules
            x = inputs
            # Enlarge the range of values in x to make max(new_x)=1 and others < 0
            x = (x - K.max(x, 1, True)) / K.epsilon() + 1
            mask = K.clip(x, 0, 1)  # the max value in x clipped to 1 and other to 0

        # masked inputs, shape = [batch_size, dim_vector]
        inputs_masked = K.batch_dot(inputs, mask, [1, 1])
        return inputs_masked

    def compute_output_shape(self, input_shape):
        if type(input_shape[0]) is tuple:  # true label provided
            return tuple([None, input_shape[0][-1]])
        else:
            return tuple([None, input_shape[-1]])


def squash(vectors, axis=-1):
    """
    The non-linear activation used in Capsule. It drives the length of a large vector to near 1 and small vector to 0
    :param vectors: some vectors to be squashed, N-dim tensor
    :param axis: the axis to squash
    :return: a Tensor with same shape as input vectors
    """
    s_squared_norm = K.sum(K.square(vectors), axis, keepdims=True)
    scale = s_squared_norm / (1 + s_squared_norm) / K.sqrt(s_squared_norm)
    return scale * vectors


'''
class CapsuleLayer(layers.Layer):
    """
    The capsule layer. It is similar to Dense layer. Dense layer has `in_num` inputs, each is a scalar, the output of the 
    neuron from the former layer, and it has `out_num` output neurons. CapsuleLayer just expand the output of the neuron
    from scalar to vector. So its input shape = [None, input_num_capsule, input_dim_vector] and output shape = \
    [None, num_capsule, dim_vector]. For Dense Layer, input_dim_vector = dim_vector = 1.

    :param num_capsule: number of capsules in this layer
    :param dim_vector: dimension of the output vectors of the capsules in this layer
    :param num_routings: number of iterations for the routing algorithm
    """
    def __init__(self, num_capsule, dim_vector, num_routing=3,
                 kernel_initializer='glorot_uniform',
                 bias_initializer='zeros',
                 **kwargs):
        super(CapsuleLayer, self).__init__(**kwargs)
        self.num_capsule = num_capsule
        self.dim_vector = dim_vector
        self.num_routing = num_routing
        self.kernel_initializer = initializers.get(kernel_initializer)
        self.bias_initializer = initializers.get(bias_initializer)

    def build(self, input_shape):
        assert len(input_shape) >= 3, "The input Tensor should have shape=[None, input_num_capsule, input_dim_vector]"
        self.input_num_capsule = input_shape[1]
        self.input_dim_vector = input_shape[2]

        # Transform matrix
        self.W = self.add_weight(shape=[self.input_num_capsule, self.num_capsule, self.input_dim_vector, self.dim_vector],
                                 initializer=self.kernel_initializer,
                                 name='W')

        # Coupling coefficient. The redundant dimensions are just to facilitate subsequent matrix calculation.
        self.bias = self.add_weight(shape=[1, self.input_num_capsule, self.num_capsule, 1, 1],
                                    initializer=self.bias_initializer,
                                    name='bias',
                                    trainable=False)
        self.built = True

    def call(self, inputs, training=None):
        # inputs.shape=[None, input_num_capsule, input_dim_vector]
        # Expand dims to [None, input_num_capsule, 1, 1, input_dim_vector]
        inputs_expand = K.expand_dims(K.expand_dims(inputs, 2), 2)

        # Replicate num_capsule dimension to prepare being multiplied by W
        # Now it has shape = [None, input_num_capsule, num_capsule, 1, input_dim_vector]
        inputs_tiled = K.tile(inputs_expand, [1, 1, self.num_capsule, 1, 1])

        """  
        # Compute `inputs * W` by expanding the first dim of W. More time-consuming and need batch_size.
        # Now W has shape  = [batch_size, input_num_capsule, num_capsule, input_dim_vector, dim_vector]
        w_tiled = K.tile(K.expand_dims(self.W, 0), [self.batch_size, 1, 1, 1, 1])

        # Transformed vectors, inputs_hat.shape = [None, input_num_capsule, num_capsule, 1, dim_vector]
        inputs_hat = K.batch_dot(inputs_tiled, w_tiled, [4, 3])
        """
        # Compute `inputs * W` by scanning inputs_tiled on dimension 0. This is faster but requires Tensorflow.
        # inputs_hat.shape = [None, input_num_capsule, num_capsule, 1, dim_vector]
        inputs_hat = tf.scan(lambda ac, x: K.batch_dot(x, self.W, [3, 2]),
                             elems=inputs_tiled,
                             initializer=K.zeros([self.input_num_capsule, self.num_capsule, 1, self.dim_vector]))
        """
        # Routing algorithm V1. Use tf.while_loop in a dynamic way.
        def body(i, b, outputs):
            c = tf.nn.softmax(self.bias, dim=2)  # dim=2 is the num_capsule dimension
            outputs = squash(K.sum(c * inputs_hat, 1, keepdims=True))
            b = b + K.sum(inputs_hat * outputs, -1, keepdims=True)
            return [i-1, b, outputs]

        cond = lambda i, b, inputs_hat: i > 0
        loop_vars = [K.constant(self.num_routing), self.bias, K.sum(inputs_hat, 1, keepdims=True)]
        _, _, outputs = tf.while_loop(cond, body, loop_vars)
        """
        # Routing algorithm V2. Use iteration. V2 and V1 both work without much difference on performance
        assert self.num_routing > 0, 'The num_routing should be > 0.'
        for i in range(self.num_routing):
            c = tf.nn.softmax(self.bias, dim=2)  # dim=2 is the num_capsule dimension
            # outputs.shape=[None, 1, num_capsule, 1, dim_vector]
            outputs = squash(K.sum(c * inputs_hat, 1, keepdims=True))

            # last iteration needs not compute bias which will not be passed to the graph any more anyway.
            if i != self.num_routing - 1:
                # self.bias = K.update_add(self.bias, K.sum(inputs_hat * outputs, [0, -1], keepdims=True))
                self.bias += K.sum(inputs_hat * outputs, -1, keepdims=True)
            # tf.summary.histogram('BigBee', self.bias)  # for debugging
        return K.reshape(outputs, [-1, self.num_capsule, self.dim_vector])

    def compute_output_shape(self, input_shape):
        return tuple([None, self.num_capsule, self.dim_vector])


def PrimaryCap(inputs, dim_vector, n_channels, kernel_size, strides, padding):
    """
    Apply Conv2D `n_channels` times and concatenate all capsules
    :param inputs: 4D tensor, shape=[None, width, height, channels]
    :param dim_vector: the dim of the output vector of capsule
    :param n_channels: the number of types of capsules
    :return: output tensor, shape=[None, num_capsule, dim_vector]
    """
    output = layers.Conv2D(filters=dim_vector*n_channels, kernel_size=kernel_size, strides=strides, padding=padding)(inputs)
    outputs = layers.Reshape(target_shape=[-1, dim_vector])(output)
    return layers.Lambda(squash)(outputs)
'''


class CapsuleLayer(layers.Layer):
    """
    The capsule layer. It is similar to Dense layer. Dense layer has `in_num` inputs, each is a scalar, the output of the
    neuron from the former layer, and it has `out_num` output neurons. CapsuleLayer just expand the output of the neuron
    from scalar to vector. So its input shape = [None, input_num_capsule, input_dim_vector] and output shape = \
    [None, num_capsule, dim_vector]. For Dense Layer, input_dim_vector = dim_vector = 1.

    :param num_capsule: number of capsules in this layer
    :param dim_vector: dimension of the output vectors of the capsules in this layer
    :param num_routings: number of iterations for the routing algorithm
    """

    def __init__(self, num_capsule, dim_vector, num_routing=3,
                 kernel_initializer='glorot_uniform',
                 bias_initializer='zeros',
                 **kwargs):
        super(CapsuleLayer, self).__init__(**kwargs)
        self.num_capsule = num_capsule
        self.dim_vector = dim_vector
        self.num_routing = num_routing
        self.kernel_initializer = initializers.get(kernel_initializer)
        self.bias_initializer = initializers.get(bias_initializer)

    def build(self, input_shape):
        assert len(input_shape) >= 3, "The input Tensor should have shape=[None, input_num_capsule, input_dim_vector]"
        self.input_num_capsule = input_shape[1]
        self.input_dim_vector = input_shape[2]

        # Transform matrix
        self.W = self.add_weight(
            shape=[self.input_num_capsule, self.num_capsule, self.input_dim_vector, self.dim_vector],
            initializer=self.kernel_initializer,
            name='W')

        # Coupling coefficient. The redundant dimensions are just to facilitate subsequent matrix calculation.
        self.bias = self.add_weight(shape=[1, self.input_num_capsule, self.num_capsule, 1, 1],
                                    initializer=self.bias_initializer,
                                    name='bias',
                                    trainable=False)
        self.built = True

    def call(self, inputs, training=None):
        # inputs.shape=[None, input_num_capsule, input_dim_vector]
        # Expand dims to [None, input_num_capsule, 1, 1, input_dim_vector]
        inputs_expand = K.expand_dims(K.expand_dims(inputs, 2), 2)

        # Replicate num_capsule dimension to prepare being multiplied by W
        # Now it has shape = [None, input_num_capsule, num_capsule, 1, input_dim_vector]
        inputs_tiled = K.tile(inputs_expand, [1, 1, self.num_capsule, 1, 1])

        """  
        # Compute `inputs * W` by expanding the first dim of W. More time-consuming and need batch_size.
        # Now W has shape  = [batch_size, input_num_capsule, num_capsule, input_dim_vector, dim_vector]
        w_tiled = K.tile(K.expand_dims(self.W, 0), [self.batch_size, 1, 1, 1, 1])

        # Transformed vectors, inputs_hat.shape = [None, input_num_capsule, num_capsule, 1, dim_vector]
        inputs_hat = K.batch_dot(inputs_tiled, w_tiled, [4, 3])
        """
        # Compute `inputs * W` by scanning inputs_tiled on dimension 0. This is faster but requires Tensorflow.
        # inputs_hat.shape = [None, input_num_capsule, num_capsule, 1, dim_vector]
        inputs_hat = tf.scan(lambda ac, x: K.batch_dot(x, self.W, [3, 2]),
                             elems=inputs_tiled,
                             initializer=K.zeros([self.input_num_capsule, self.num_capsule, 1, self.dim_vector]))
        """
        # Routing algorithm V1. Use tf.while_loop in a dynamic way.
        def body(i, b, outputs):
            c = tf.nn.softmax(self.bias, dim=2)  # dim=2 is the num_capsule dimension
            outputs = squash(K.sum(c * inputs_hat, 1, keepdims=True))
            b = b + K.sum(inputs_hat * outputs, -1, keepdims=True)
            return [i-1, b, outputs]

        cond = lambda i, b, inputs_hat: i > 0
        loop_vars = [K.constant(self.num_routing), self.bias, K.sum(inputs_hat, 1, keepdims=True)]
        _, _, outputs = tf.while_loop(cond, body, loop_vars)
        """
        # Routing algorithm V2. Use iteration. V2 and V1 both work without much difference on performance
        assert self.num_routing > 0, 'The num_routing should be > 0.'
        for i in range(self.num_routing):
            c = tf.nn.softmax(self.bias, dim=2)  # dim=2 is the num_capsule dimension
            # outputs.shape=[None, 1, num_capsule, 1, dim_vector]
            outputs = squash(K.sum(c * inputs_hat, 1, keepdims=True))

            # last iteration needs not compute bias which will not be passed to the graph any more anyway.
            if i != self.num_routing - 1:
                # self.bias = K.update_add(self.bias, K.sum(inputs_hat * outputs, [0, -1], keepdims=True))
                self.bias += K.sum(inputs_hat * outputs, -1, keepdims=True)
                # tf.summary.histogram('BigBee', self.bias)  # for debugging
        return K.reshape(outputs, [-1, self.num_capsule, self.dim_vector])

    def compute_output_shape(self, input_shape):
        return tuple([None, self.num_capsule, self.dim_vector])


def PrimaryCap(inputs, dim_vector, n_channels, kernel_size, strides, padding):
    """
    Apply Conv2D `n_channels` times and concatenate all capsules
    :param inputs: 4D tensor, shape=[None, width, height, channels]
    :param dim_vector: the dim of the output vector of capsule
    :param n_channels: the number of types of capsules
    :return: output tensor, shape=[None, num_capsule, dim_vector]
    """
    output = layers.Conv2D(filters=dim_vector * n_channels, kernel_size=kernel_size, strides=strides, padding=padding)(
        inputs)
    outputs = layers.Reshape(target_shape=[-1, dim_vector])(output)
    return layers.Lambda(squash)(outputs)


# Building the Model:

'''
Here we use the layers to build up the model. 
The model is a bit different from a standard  X→y  model, it is  (X,y)→(y,X)  meaning it attempts to predict the class from the image,
and then at the same time, using the same capsule reconstruct the image from the class. 
The approach appears very cGAN-like where the task of reconstructing better helps the model 'understand' the image data better.
'''
from keras import layers, models
from keras import backend as K
from keras.utils import to_categorical


def CapsNet(input_shape, n_class, num_routing):
    """
    A Capsule Network on MNIST.
    :param input_shape: data shape, 4d, [None, width, height, channels]
    :param n_class: number of classes
    :param num_routing: number of routing iterations
    :return: A Keras Model with 2 inputs and 2 outputs
    """
    x = layers.Input(shape=input_shape)

    # Layer 1: Just a conventional Conv2D layer
    conv1 = layers.Conv2D(filters=256, kernel_size=9, strides=1, padding='valid', data_format="channels_last",
                          input_shape=(32, 32, 3), activation='relu', name='conv1')(x)
    # ,input_shape=(32,32,3)
    # data_format="channels_last"

    print(" Conv2D DONE")
    a1 = conv1.shape
    print(a1)

    # Layer 2: Conv2D layer with `squash` activation, then reshape to [None, num_capsule, dim_vector]
    primarycaps = PrimaryCap(conv1, dim_vector=8, n_channels=32, kernel_size=9, strides=2, padding='valid')
    print(" Primary Caps DONE ")
    a2 = primarycaps.shape
    print(a2)

    # Layer 3: Capsule layer. Routing algorithm works here.
    digitcaps = CapsuleLayer(num_capsule=n_class, dim_vector=16, num_routing=num_routing, name='digitcaps')(primarycaps)
    print(" Digitalcaps DONE")
    a3 = digitcaps.shape
    print(a3)

    # Layer 4: This is an auxiliary layer to replace each capsule with its length. Just to match the true label's shape.
    # If using tensorflow, this will not be necessary. :)
    out_caps = Length(name='out_caps')(digitcaps)
    print(" Outcaps DONE")
    a4 = out_caps.shape
    print(a4)

    '''

    # Decoder network.
    y = layers.Input(shape=(n_class,))
    s= digitcaps.shape
    print(s)
    masked_by_y = Mask()([digitcaps, y])  # The true label is used to mask the output of capsule layer. For training
    m=masked_by_y.shape
    print(m)
    masked = Mask()(digitcaps)  # Mask using the capsule with maximal length. For prediction

    # Shared Decoder model in training and prediction
    decoder = models.Sequential(name='decoder')
    decoder.add(layers.Dense(512, activation='relu', input_dim=16*n_class))
    decoder.add(layers.Dense(1024, activation='relu'))
    decoder.add(layers.Dense(, activation='sigmoid'))
    decoder.add(layers.Reshape(target_shape=[32,32,3], name='out_recon'))

    # Models for training and evaluation (prediction)
    train_model = models.Model([x, y], [out_caps, decoder(masked_by_y)])
    eval_model = models.Model(x, [out_caps, decoder(masked)])

    # manipulate model
    noise = layers.Input(shape=(n_class, 16))
    noised_digitcaps = layers.Add()([digitcaps, noise])
    masked_noised_y = Mask()([noised_digitcaps, y])
    manipulate_model = models.Model([x, y, noise], decoder(masked_noised_y))
    return train_model, eval_model, manipulate_model



    # Decoder network.
    y = layers.Input(shape=(n_class,))
    masked = Mask()([digitcaps, y])  # The true label is used to mask the output of capsule layer.
    x_recon = layers.Dense(512, activation='relu')(masked)
    x_recon = layers.Dense(1024, activation='relu')(x_recon)    
    x_recon = layers.Dense(784, activation='sigmoid')(x_recon)  3072
    x_recon = layers.Reshape(target_shape=[32, 32, 3], name='out_recon')(x_recon)

    # two-input-two-output keras Model
    return models.Model([x, y], [out_caps, x_recon])
    '''

    # Decoder network.
    y = layers.Input(shape=(n_class,))
    masked = Mask()([digitcaps, y])  # The true label is used to mask the output of capsule layer.
    print(masked.shape)
    x_recon = layers.Dense(512, activation='relu')(masked)
    print("x_recon", x_recon.shape)
    x_recon = layers.Dense(1024, activation='relu')(x_recon)
    x_recon = layers.Dense(32 * 32 * 3, activation='sigmoid')(x_recon)
    x_recon = layers.Reshape(target_shape=[32, 32, 3], name='out_recon')(x_recon)

    # two-input-two-output keras Model
    return models.Model([x, y], [out_caps, x_recon])


def margin_loss(y_true, y_pred):
    """
    Margin loss for Eq.(4). When y_true[i, :] contains not just one `1`, this loss should work too. Not test it.
    :param y_true: [None, n_classes]
    :param y_pred: [None, num_capsule]
    :return: a scalar loss value.
    """
    L = y_true * K.square(K.maximum(0., 0.9 - y_pred)) + \
        0.5 * (1 - y_true) * K.square(K.maximum(0., y_pred - 0.1))

    return K.mean(K.sum(L, 1))


model = CapsNet(input_shape=[32, 32, 3],
                n_class=10,
                num_routing=3)
model.summary()
try:
    plot_model(model, to_file='model.png', show_shapes=True)
except Exception as e:
    print('No fancy plot {}'.format(e))

from sklearn.model_selection import train_test_split
from keras.datasets import cifar10

K.set_image_dim_ordering('th')

(train_x, train_y), (test_x, test_y) = cifar10.load_data();

print('Training data shape', train_x.shape, train_y.shape)
print('Testing data shape', test_x.shape, test_y.shape)

classes = np.unique(train_y)
nClasses = len(classes)

print('Total number of classes:', nClasses)
print('Classes: ', classes)

# data_train = pd.read_csv('../input/train.csv')
# X_full = data_train.iloc[:,1:]
# y_full = data_train.iloc[:,:1]
# x_train, x_test, y_train, y_test = train_test_split(X_full, y_full, test_size = 0.3)

"""

Train and test images (28px x 28px) has been stock into pandas.Dataframe as 1D vectors of 784 values. We reshape all data to 28x28x1
3D matrices.

Keras requires an extra dimension in the end which correspond to channels.
MNIST images are gray scaled so it use only one channel.
For RGB images, there is 3 channels, we would have reshaped 784px vectors to 28x28x3 3D matrices.

"""

train_x = train_x.reshape(-1, 32, 32, 3)
test_x = test_x.reshape(-1, 32, 32, 3)
print(train_x.shape, test_x.shape)

"""

The data right now is in an int8 format, so before you feed it into the network you need to convert its type to float32, 
and you also have to rescale the pixel values in range 0 - 1 inclusive. So let's do that!

"""

train_x = train_x.astype('float32')
test_x = test_x.astype('float32')
train_x = train_x / 255.
test_x = test_x / 255.

"""
Labels are 10 digits numbers from 0 to 9. We need to encode these lables to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0]).

"""

train_y_one_hot = to_categorical(train_y)
test_y_one_hot = to_categorical(test_y)

print('Original label: ', train_y[0])
print('after conversation to one hot', train_y_one_hot[0])

x_train, x_test, y_train, y_test = train_test_split(train_x, train_y_one_hot, test_size=0.2)


def train(model, data, epoch_size_frac=1.0):
    """
    Training a CapsuleNet
    :param model: the CapsuleNet model
    :param data: a tuple containing training and testing data, like `((x_train, y_train), (x_test, y_test))`
    :param args: arguments
    :return: The trained model
    """
    # unpacking the data
    (x_train, y_train), (x_test, y_test) = data

    # callbacks
    log = callbacks.CSVLogger('log.csv')
    checkpoint = callbacks.ModelCheckpoint('weights-{epoch:02d}.h5',
                                           save_best_only=True, save_weights_only=True, verbose=1)
    lr_decay = callbacks.LearningRateScheduler(schedule=lambda epoch: 0.001 * np.exp(-epoch / 10.))

    # compile the model
    model.compile(optimizer='adam',
                  loss=[margin_loss, 'mse'],
                  loss_weights=[1., 0.0005],
                  metrics={'out_caps': 'accuracy'})

    """
    # Training without data augmentation:
    model.fit([x_train, y_train], [y_train, x_train], batch_size=args.batch_size, epochs=args.epochs,
              validation_data=[[x_test, y_test], [y_test, x_test]], callbacks=[log, tb, checkpoint])
    """

    # -----------------------------------Begin: Training with data augmentation -----------------------------------#
    def train_generator(x, y, batch_size, shift_fraction=0.1):
        train_datagen = ImageDataGenerator(width_shift_range=shift_fraction,
                                           height_shift_range=shift_fraction)  # shift up to 2 pixel for MNIST
        generator = train_datagen.flow(x, y, batch_size=batch_size)
        while 1:
            x_batch, y_batch = generator.next()
            yield ([x_batch, y_batch], [y_batch, x_batch])

    # Training with data augmentation. If shift_fraction=0., also no augmentation.
    history = model.fit_generator(generator=train_generator(x_train, y_train, 64, 0.1),
                        steps_per_epoch=int(epoch_size_frac * y_train.shape[0] / 64),
                        epochs=3,
                        validation_data=[[x_test, y_test], [y_test, x_test]],
                        callbacks=[log, checkpoint, lr_decay])
    # -----------------------------------End: Training with data augmentation -----------------------------------#
    from keras.models import model_from_json
    print(history.history['loss'])
    print(history.history.keys())
    '''
    # summarize history for accuracy
    plt.plot(history.history['out_caps_acc'])
    plt.plot(history.history['val_out_caps_acc'])
    plt.title('model accuracy')
    plt.ylabel('accuracy')
    plt.xlabel('epoch')
    plt.legend(['train', 'test'], loc='upper left')
    plt.show()
    # summarize history for loss
    plt.plot(history.history['loss'])
    plt.plot(history.history['val_loss'])
    plt.title('model loss')
    plt.ylabel('loss')
    plt.xlabel('epoch')
    plt.legend(['train', 'test'], loc='upper left')
    plt.show()
    # summarize history for recon loss
    plt.plot(history.history['out_recon_loss'])
    plt.plot(history.history['val_out_recon_loss'])
    plt.title('model loss')
    plt.ylabel('loss')
    plt.xlabel('epoch')
    plt.legend(['train', 'test'], loc='upper left')
    plt.show()
    '''

    model_jason = model.to_json()

    plot_model_history(history)
    plot_model_history_loss(history)


    with open("/Users/keyadesai/Desktop/capsNet/models/cifar10_capsnet_5.json", "w") as json_file:
        json_file.write(model_jason)

    model.save_weights("/Users/keyadesai/Desktop/capsNet/models/cifar10_capsnet_5.h5")
    print("saved model to disk")

    return model


train(model=model, data=((x_train, y_train), (x_test[:60], y_test[:60])),
      epoch_size_frac=0.005)  # do 10% of an epoch (takes too long)




'''
print('##########PREDICT##########')
import cv2
from keras.models import model_from_json
from scipy.misc import toimage
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image


print('Airplanes')

count = 0
for i in range(0, 100):

    # img=cv2.imread("/Users/keyadesai/Desktop/capsNet/data/horse_" + str(i) + ".jpg")
    img = cv2.imread("/Users/keyadesai/Desktop/capsNet/dataset/Airplanes/Airplanes_" + str(i) + ".jpg")
    # print(img.size)
    # print(img.shape)

    ##### YCBCR

    image = Image.fromarray(img)
    img_yuv = image.convert('YCbCr')
    img = np.asarray(img_yuv)

    img = cv2.resize(img, (32, 32))

    plt.figure(figsize=[5, 5])

    img = img.reshape(-1, 32, 32, 3)
    img = img.astype('float32')
    img = img / 255.

    # plt.show()
    # img2 = cv2.resize(img, (64, 48))

    # datagen = ImageDataGenerator(featurewise_std_normalization=True,zca_whitening=True, zca_epsilon=1e-6)

   
    y = [[0, 0, 0, 0, 0, 0, 1, 0, 0, 0]]
    y_test = np.asarray(y)
    # print(y_test.shape)

    pred, x_recon = model.predict([img, y_test], batch_size=1)

    # print(pred)
    pred_class = np.argmax(pred, axis=1)
    #print(pred_class)


    actual_class = 0

    # print(pred)
    pred_class = np.argmax(pred, axis=1)
    #print(pred_class)

    if (pred_class == actual_class):
        count = count + 1

print(count)



print('Automobile')

count = 0
for i in range(0, 100):

    # img=cv2.imread("/Users/keyadesai/Desktop/capsNet/data/horse_" + str(i) + ".jpg")
    img = cv2.imread("/Users/keyadesai/Desktop/capsNet/dataset/Automobile/Automobile_" + str(i) + ".jpg")
    # print(img.size)
    # print(img.shape)

    ##### YCBCR

    image = Image.fromarray(img)
    img_yuv = image.convert('YCbCr')
    img = np.asarray(img_yuv)

    img = cv2.resize(img, (32, 32))

    plt.figure(figsize=[5, 5])

    img = img.reshape(-1, 32, 32, 3)
    img = img.astype('float32')
    img = img / 255.

    # plt.show()
    # img2 = cv2.resize(img, (64, 48))

    # datagen = ImageDataGenerator(featurewise_std_normalization=True,zca_whitening=True, zca_epsilon=1e-6)


 
    y = [[0, 0, 0, 0, 0, 0, 1, 0, 0, 0]]
    y_test = np.asarray(y)
    # print(y_test.shape)

    pred, x_recon = model.predict([img, y_test], batch_size=1)

    # print(pred)
    pred_class = np.argmax(pred, axis=1)
    #print(pred_class)


    actual_class = 1

    # print(pred)
    pred_class = np.argmax(pred, axis=1)
    #print(pred_class)

    if (pred_class == actual_class):
        count = count + 1

print(count)


print('BIRDS')

count = 0
for i in range(0, 100):

    if(i!=11):
        img = cv2.imread("/Users/keyadesai/Desktop/capsNet/dataset/Birds/Birds_" + str(i) + ".jpg")


        actual_class = 2

        ##### YCBCR####

        image = Image.fromarray(img)
        img_yuv = image.convert('YCbCr')
        img = np.asarray(img_yuv)

        img = cv2.resize(img, (32, 32))

        plt.figure(figsize=[5, 5])

        img = img.reshape(-1, 32, 32, 3)
        img = img.astype('float32')
        img = img / 255.



        y = [[0, 0, 0, 0, 0, 0, 1, 0, 0, 0]]
        y_test = np.asarray(y)


        pred, x_recon = model.predict([img, y_test], batch_size=1)

        pred_class = np.argmax(pred, axis=1)
        #print(pred_class)





        pred_class = np.argmax(pred, axis=1)


        if (pred_class == actual_class):
            count = count + 1

print(count)

print('Cats')

count = 0
for i in range(0, 100):

    img = cv2.imread("/Users/keyadesai/Desktop/capsNet/dataset/Cats/Cats_" + str(i) + ".jpg")

    actual_class = 3

    ##### YCBCR####

    image = Image.fromarray(img)
    img_yuv = image.convert('YCbCr')
    img = np.asarray(img_yuv)

    img = cv2.resize(img, (32, 32))

    plt.figure(figsize=[5, 5])

    img = img.reshape(-1, 32, 32, 3)
    img = img.astype('float32')
    img = img / 255.

    y = [[0, 0, 0, 0, 0, 0, 1, 0, 0, 0]]
    y_test = np.asarray(y)

    pred, x_recon = model.predict([img, y_test], batch_size=1)

    pred_class = np.argmax(pred, axis=1)


    pred_class = np.argmax(pred, axis=1)

    if (pred_class == actual_class):
        count = count + 1

print(count)


print('Deer')

count = 0
for i in range(0, 29):

    img = cv2.imread("/Users/keyadesai/Desktop/capsNet/dataset/Deer/deer_" + str(i) + ".jpg")

    actual_class = 4

    ##### YCBCR####

    image = Image.fromarray(img)
    img_yuv = image.convert('YCbCr')
    img = np.asarray(img_yuv)

    img = cv2.resize(img, (32, 32))

    plt.figure(figsize=[5, 5])

    img = img.reshape(-1, 32, 32, 3)
    img = img.astype('float32')
    img = img / 255.

    y = [[0, 0, 0, 0, 0, 0, 1, 0, 0, 0]]
    y_test = np.asarray(y)

    pred, x_recon = model.predict([img, y_test], batch_size=1)

    pred_class = np.argmax(pred, axis=1)


    pred_class = np.argmax(pred, axis=1)

    if (pred_class == actual_class):
        count = count + 1

print(count)


print('Dogs')

count = 0
for i in range(0, 100):

    img = cv2.imread("/Users/keyadesai/Desktop/capsNet/dataset/Dogs/Dogs_" + str(i) + ".jpg")

    actual_class = 5

    ##### YCBCR####

    image = Image.fromarray(img)
    img_yuv = image.convert('YCbCr')
    img = np.asarray(img_yuv)

    img = cv2.resize(img, (32, 32))

    plt.figure(figsize=[5, 5])

    img = img.reshape(-1, 32, 32, 3)
    img = img.astype('float32')
    img = img / 255.

    y = [[0, 0, 0, 0, 0, 0, 1, 0, 0, 0]]
    y_test = np.asarray(y)

    pred, x_recon = model.predict([img, y_test], batch_size=1)

    pred_class = np.argmax(pred, axis=1)


    pred_class = np.argmax(pred, axis=1)

    if (pred_class == actual_class):
        count = count + 1

print(count)

print('Frog')

count = 0
for i in range(0, 10):

    img = cv2.imread("/Users/keyadesai/Desktop/capsNet/dataset/Frog/frog_" + str(i) + ".jpg")

    actual_class = 6

    ##### YCBCR####
  

    img = cv2.resize(img, (32, 32))

    plt.figure(figsize=[5, 5])

    img = img.reshape(-1, 32, 32, 3)
    img = img.astype('float32')
    img = img / 255.

    y = [[0, 0, 0, 0, 0, 0, 1, 0, 0, 0]]
    y_test = np.asarray(y)

    pred, x_recon = model.predict([img, y_test], batch_size=1)

    pred_class = np.argmax(pred, axis=1)

    pred_class = np.argmax(pred, axis=1)

    if (pred_class == actual_class):
        count = count + 1

print(count)


print('Cats')

count = 0
for i in range(0, 100):

    if(i!=22):
        img = cv2.imread("/Users/keyadesai/Desktop/capsNet/dataset/Horses/Horses_" + str(i) + ".jpg")

        actual_class = 7

        ##### YCBCR####

        image = Image.fromarray(img)
        img_yuv = image.convert('YCbCr')
        img = np.asarray(img_yuv)

        img = cv2.resize(img, (32, 32))

        plt.figure(figsize=[5, 5])

        img = img.reshape(-1, 32, 32, 3)
        img = img.astype('float32')
        img = img / 255.

        y = [[0, 0, 0, 0, 0, 0, 1, 0, 0, 0]]
        y_test = np.asarray(y)

        pred, x_recon = model.predict([img, y_test], batch_size=1)

        pred_class = np.argmax(pred, axis=1)


        pred_class = np.argmax(pred, axis=1)

        if (pred_class == actual_class):
            count = count + 1

print(count)


print('Ship')

count = 0
for i in range(0, 100):

    img = cv2.imread("/Users/keyadesai/Desktop/capsNet/dataset/Ship/Ship_" + str(i) + ".jpg")

    actual_class = 8

    ##### YCBCR####

    image = Image.fromarray(img)
    img_yuv = image.convert('YCbCr')
    img = np.asarray(img_yuv)

    img = cv2.resize(img, (32, 32))

    plt.figure(figsize=[5, 5])

    img = img.reshape(-1, 32, 32, 3)
    img = img.astype('float32')
    img = img / 255.

    y = [[0, 0, 0, 0, 0, 0, 1, 0, 0, 0]]
    y_test = np.asarray(y)

    pred, x_recon = model.predict([img, y_test], batch_size=1)

    pred_class = np.argmax(pred, axis=1)


    pred_class = np.argmax(pred, axis=1)

    if (pred_class == actual_class):
        count = count + 1

print(count)


print('Truck')

count = 0
for i in range(0, 15):

    img = cv2.imread("/Users/keyadesai/Desktop/capsNet/dataset/Truck/Truck_" + str(i) + ".jpg")

    actual_class = 9

    ##### YCBCR####

    image = Image.fromarray(img)
    img_yuv = image.convert('YCbCr')
    img = np.asarray(img_yuv)

    img = cv2.resize(img, (32, 32))

    plt.figure(figsize=[5, 5])

    img = img.reshape(-1, 32, 32, 3)
    img = img.astype('float32')
    img = img / 255.

    y = [[0, 0, 0, 0, 0, 0, 1, 0, 0, 0]]
    y_test = np.asarray(y)

    pred, x_recon = model.predict([img, y_test], batch_size=1)

    pred_class = np.argmax(pred, axis=1)


    pred_class = np.argmax(pred, axis=1)

    if (pred_class == actual_class):
        count = count + 1

print(count)
'''